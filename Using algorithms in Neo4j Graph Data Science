1. Register graph in the graph catalog

CALL gds.graph.create.cypher(
 'city-graph',
 'MATCH (n:City) RETURN id(n) AS id',
 'MATCH (a:City)-[:ROAD]-> (b:City) RETURN id(a) AS source, id(b) AS target'
)
YIELD graphName, nodeCount, relationshipCount

2. Call the algorithm using the name of registered graph.

- PageRank

CALL gds.pageRank.stream('city-graph') 
YIELD nodeId, score 
RETURN gds.util.asNode(nodeId).id AS city, score

- Node similarity

CALL gds.nodeSimilarity.stream('city-graph') 
YIELD node1, node2, similarity
RETURN gds.util.asNode(node1) as city1, gds.util.asNode(node2) as city2, similarity
ORDER BY similarity DESCENDING, city1, city2

- Community detection

CALL gds.louvain.stream('city-graph')
YIELD nodeId, communityId
RETURN gds.util.asNode(nodeId).id as city, communityId
ORDER BY city ASC

